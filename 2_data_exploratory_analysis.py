# -*- coding: utf-8 -*-
"""2. Data Exploratory Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jl_JKxWAP8LHHZ_UJrcmaTIiViaKXk5P

Use this notebook for all exploratory data visualization.
"""

# Commented out IPython magic to ensure Python compatibility.
# Need to link google drive and jupyter notebook as we did in the first workbook
# link your google drive. You'll have to do this everytime you open up the notebook or reset the run time.

from google.colab import drive

drive.mount('/content/gdrive/', force_remount=True)

# the easiest way to access a shared google folder is to add the shared folder as a short cut into your drive
# find "Erdos_project" folder that Kim shared, right click, click on organize, then click on add shortcut

# %cd gdrive/MyDrive/Erdos_project

# if you get this error: [Errno 107] Transport endpoint is not connected: 'gdrive/MyDrive' /content/gdrive/MyDrive
# then go to "Runtime" at the top, and click "restart runtime"

# load the data in
# OTU table: filtered_otu_table.tsv
# soil nutrient data: soil_nutrient_data.xlsx
import os

# get the current working directory
current_working_directory = os.getcwd()

# print output to the console
print(current_working_directory)


import pandas as pd



# read in data file

otu = pd.read_csv('filtered_otu_table.csv')

otu.head()

# the "Unnamed:0" columns is the previous index IDs from the last notebook. You can remove this in your analysis.

# rename sample codes with location name

otu = otu.rename(columns={'SRR21231019': 'OKSW',
                        'SRR21231020': 'OKPV',
                        'SRR21231021': 'OKNK',
                        'SRR21231022': 'OKFC',
                        'SRR21231023': 'NEPA',
                        'SRR21231024': 'NENP',
                        'SRR21231025': 'NELB',
                        'SRR21231026': 'NECL',
                        'SRR21231027': 'OKWF',
                        'SRR21231028': 'OKVI',
                        'SRR21231029': 'NECA',
                        'SRR21231030': 'NEBR', })

otu.head()

otu2 = otu.iloc[:, 1:19]

otu2.head()



soil = pd.read_excel(r"soil_nutrient_data.xlsx")

print(soil)

"""Sample names in otu table matched to sample names in soil data table

## Kayla Relative Abundance Plot
"""

import matplotlib.pyplot as plt

# combine the taxonomic order into one name: ie - kingdom_phylum_class_order_family
# Define which columns to combine
columns_to_combine = ['Kingdom', 'Phylum', 'Class', 'Order', 'Family', 'Genus']

# Replace NaN with "NA"
otu2[columns_to_combine] = otu2[columns_to_combine].fillna('NA')

# Combine the specified columns into a single string with underscores
otu2['Combined'] = otu2[columns_to_combine].apply(lambda row: '_'.join(row), axis=1)

otu2.head() # the combined column is at the end

# remove the first 6 columns with the seperated names

otu3 = otu2.iloc[:, 6:20]

otu3.head()

# set the "Combined" column as row names

otu3.set_index('Combined', inplace=True)

otu3.head()

# reformat table so that rows are samples and columns are OTUs
transposed_otu3 = otu3.transpose()

transposed_otu3.head()

# check dimensions. Should be 299 OTUs and 12 samples
# Get the dimensions
otu3_rows, otu3_columns = transposed_otu3.shape

# Print the dimensions
print(f"Number of rows: {otu3_rows}")
print(f"Number of columns: {otu3_columns}")

"""The next chunk of code is a relative abundance plot, however, it is not grouped by any specific taxonomic hiearchy. The next code chunk will be."""

# OTU abundance table format: rows is samples and columns is OTUs

# Calculate relative abundances
relative_abundance = transposed_otu3.div(transposed_otu3.sum(axis=1), axis=0)

# Plot relative abundances
relative_abundance.plot(kind='bar', stacked=True, figsize=(10, 6))

# Set plot labels and title
plt.xlabel('Samples')
plt.ylabel('Relative Abundance')
plt.title('OTU Relative Abundance')

# Display legend
plt.legend(title='OTU', bbox_to_anchor=(1.05, 1), loc='upper left')

# Show the plot
plt.tight_layout()
plt.show()

# Group by family level of taxonomic order
family_level = otu3.groupby(otu3.index.str.split('_').str[4], axis=0).sum()
# axis has to be 0 because that indicates rownames

# Calculate relative abundance
relative_abundance = family_level.div(family_level.sum(axis=0), axis=1)

# transpose data again so that columns are sample names
relative_abundance = relative_abundance.transpose()

family_level.head()

relative_abundance.head()

# Plot the data
relative_abundance.plot(kind='bar', stacked=True, figsize=(10, 6))

# Set plot labels and title
plt.xlabel('Samples')
plt.ylabel('Relative Abundance')
plt.title('Relative Abundance at Family Level')

# Display legend
plt.legend(title='Family', bbox_to_anchor=(1.05, 1), loc='upper left')

# Show the plot
plt.tight_layout()

# Save the relative abundance plot
plt.savefig('family_relative_abundance', bbox_inches='tight')


plt.show()

# Group by order level of taxonomic order
order_level = otu3.groupby(otu3.index.str.split('_').str[3], axis=0).sum()
# axis has to be 0 because that indicates rownames

# Calculate relative abundance
relative_abundance_o = order_level.div(order_level.sum(axis=0), axis=1)

# transpose data again so that columns are sample names
relative_abundance_o = relative_abundance_o.transpose()



order_level.head()

# save otu table grouped by order

order_level.to_csv('abundance_order_level.csv', index=True)

relative_abundance_o.head()

# Plot the data
relative_abundance_o.plot(kind='bar', stacked=True, figsize=(10, 6))

# Set plot labels and title
plt.xlabel('Samples')
plt.ylabel('Relative Abundance')
plt.title('Relative Abundance at Order Level')

# Display legend
plt.legend(title='Order', bbox_to_anchor=(1.05, 1), loc='upper left')

# Show the plot
plt.tight_layout()

# Save the relative abundance plot
plt.savefig('order_relative_abundance', bbox_inches='tight')


plt.show()

# Group by class level of taxonomic order
phylum_level = otu3.groupby(otu3.index.str.split('_').str[2], axis=0).sum()
# axis has to be 0 because that indicates rownames

# Calculate relative abundance
relative_abundance_p = phylum_level.div(phylum_level.sum(axis=0), axis=1)

# transpose data again so that columns are sample names
relative_abundance_p = relative_abundance_p.transpose()

phylum_level.head()

relative_abundance_p.head()

# Plot the data
relative_abundance_p.plot(kind='bar', stacked=True, figsize=(10, 6))

# Set plot labels and title
plt.xlabel('Samples')
plt.ylabel('Relative Abundance')
plt.title('Relative Abundance at Phylum Level')

# Display legend
plt.legend(title='Phylum', bbox_to_anchor=(1.05, 1), loc='upper left')

# Show the plot
plt.tight_layout()

# Save the relative abundance plot
plt.savefig('phylum_relative_abundance', bbox_inches='tight')


plt.show()

"""Beta Diversity script to make an nmds plot
make sure you have skikit-bio, panda, numpy, and matplotlib installed
"""

#pip install scikit-bio

import numpy as np
from scipy.spatial.distance import braycurtis
from sklearn.manifold import MDS
import matplotlib.pyplot as plt
import pandas as pd

# use whichever data frame you think is best.
# otu3 is taxonomy  as rows and sample names as columns
# transposed_otu3 is samples as rows and taxonomy names as columns
# either way, each are a data frame that needs to be converted to a 2D numpy array
data = transposed_otu3.values

distances = np.zeros((data.shape[0], data.shape[0]))
for i in range(data.shape[0]):
    for j in range(data.shape[0]):
        distances[i, j] = braycurtis(data[i], data[j])

# Perform NMDS
mds = MDS(n_components=2, dissimilarity='precomputed')
nmds_results = mds.fit_transform(distances)

# Create a DataFrame for visualization (optional, replace labels with your own)
df = pd.DataFrame(nmds_results, columns=['NMDS1', 'NMDS2'])

df.head()

df['Sample'] = ['Sample 1', 'Sample 2', 'Sample 3', 'Sample 4', 'Sample 5', 'Sample 6', 'Sample 7', 'Sample 8', 'Sample 9', 'Sample 10', 'Sample 11', 'Sample 12']

# Scatter plot the NMDS results
plt.figure(figsize=(8, 6))
plt.scatter(df['NMDS1'], df['NMDS2'])

# Add labels to the points
for i, label in enumerate(df['Sample']):
    plt.text(df['NMDS1'][i], df['NMDS2'][i], label)

plt.xlabel('NMDS1')
plt.ylabel('NMDS2')
plt.title('NMDS Plot')

plt.show()



"""## Kim's univariate permanova (ANOVA)- need help not completed"""

#pip install scikit-bio
!pip install pingouin

#load required packages
import pandas as pd
import numpy as np
from skbio import TabularMSA
import pingouin as pg
from statsmodels.stats.multitest import multipletests
from google.colab import drive
from skbio.diversity import beta_diversity
from scipy.stats import f_oneway

# Commented out IPython magic to ensure Python compatibility.
drive.mount('/content/gdrive/', force_remount=True)
# %cd gdrive/MyDrive/Erdos_project

#read in and wrangle input files

# Read the metadata file
soil = pd.read_excel("soil_nutrient_data.xlsx", index_col=0)
print(soil)
#read in otu table
otu = pd.read_csv('filtered_otu_table.csv')
print(otu)
otu2 = otu.iloc[:, 1:19]
otu2.head()
columns_to_combine = ['Kingdom', 'Phylum', 'Class', 'Order', 'Family', 'Genus']

# Replace NaN with "NA"
otu2[columns_to_combine] = otu2[columns_to_combine].fillna('NA')

# Combine the specified columns into a single string with underscores
otu2['Taxa'] = otu2[columns_to_combine].apply(lambda row: '_'.join(row), axis=1)

otu2.head() # the combined column is at the end
#remove the 'Kingdom', 'Phylum', 'Class', 'Order', 'Family', 'Genus' columns
otu3 = otu2.iloc[:,6:20]
#make Taxa column the rownames
otu3.set_index('Taxa', inplace=True)

# Drop the "Taxa" column
otu3 = otu3.drop(columns=['Taxa'])

# Now, the "Taxa" column is the row names, and it's removed from the DataFrame
otu3 = otu3.rename(columns={'SRR21231019': 'OKSW',
                        'SRR21231020': 'OKPV',
                        'SRR21231021': 'OKNK',
                        'SRR21231022': 'OKFC',
                        'SRR21231023': 'NEPA',
                        'SRR21231024': 'NENP',
                        'SRR21231025': 'NELB',
                        'SRR21231026': 'NECL',
                        'SRR21231027': 'OKWF',
                        'SRR21231028': 'OKVI',
                        'SRR21231029': 'NECA',
                        'SRR21231030': 'NEBR', })
otu3_transposed = otu.transpose()

#run anova for eachh variable

all_data = []
metadata_cols = soil.columns

for meta_id in metadata_cols:
    metadatai = soil[[metadata_cols[0], meta_id]].dropna()
    metadatai.columns = ["sample_name", "metadata"]

    samples_w_data = metadatai["sample_name"]
    metadata_each = metadatai["metadata"]

    # Assuming asv_rare is your OTU data (replace with your actual data)
    OTU_subset_1 = otu3[samples_w_data]

    # Run PERMANOVA
    adon = pg.anova(OTU_subset_1, metadata_each)

    pval = adon['p-unc'].values[0]
    r2 = adon['np2'].values[0]

    all_data.append([meta_id, r2, pval])

all_df = pd.DataFrame(all_data, columns=["metadata", "r2", "pvalue"])

# Correct for multiple comparisons using Benjamini-Hochberg method
qval = multipletests(all_df["pvalue"], method="fdr_bh")[1]

all_df["qval"] = qval

all_df.to_csv("Permanova_results_all_rare.csv", index=False)

# Assuming 'otu_table' is your OTU table DataFrame, and 'metadata' is your metadata DataFrame
# Assuming 'metadata_column' is the column in 'metadata' for which you want to perform ANOVA

# Calculate Bray-Curtis distances
bc_dm = beta_diversity("braycurtis", otu3_transposed.values, otu3_transposed.index)

# Perform ANOVA for each metadata variable
metadata_cols = soil.columns

results = []

for meta_var in metadata_cols:
    groups = [soil[meta_var][otu3_transposed.index == sample] for sample in otu3_transposed.index]
    f_statistic, p_value = f_oneway(*groups)
    results.append([meta_var, p_value, f_statistic])

# Create a DataFrame from the results
result_df = pd.DataFrame(results, columns=["Metadata_Variable", "P-Value", "F-Statistic"])

# Save the results to a CSV file
result_df.to_csv("bray_anova_results.csv", index=False)

"""# Kim - Correlation matrix"""

import seaborn as sns

import seaborn as sns
import matplotlib.pyplot as plt

# Set the figure size
plt.figure(figsize=(10, 8))  # Adjust the width and height as needed

# Create the heatmap with larger font size for annotations
ax = sns.heatmap(soil.corr(), annot=True, annot_kws={"size": 8})

# Customize the plot further if necessary
plt.title("Pearson Correlation Heatmap", fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from scipy.stats import spearmanr

# Calculate Spearman correlation coefficients
corr_matrix = soil.corr(method='spearman')

# Set the figure size
plt.figure(figsize=(10, 8))

# Define a custom marker for the triangle plot
marker = [[0, 0.5], [1, 0], [1, 0.5]]

# Create the Spearman correlation heatmap with custom markers
ax = sns.heatmap(corr_matrix, annot=True, annot_kws={"size": 8}) #, cmap='coolwarm',
               # marker=marker, linewidths=0.5)

# Customize the plot further if necessary
plt.title("Spearman Correlation Heatmap", fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

# Show the plot
plt.show()

"""Stephanie - Alpha diversity"""

import pandas as pd
import numpy as np
#!pip install ecopy
#from scipy.special import comb
#from ecopy import diversity
#ecopy does not work due to comb issue
#!pip install scikit-bio
from skbio.diversity import alpha_diversity
from skbio.diversity import alpha

a_otu = otu2.iloc[:,6:18]
data = a_otu.transpose()
ids = list(a_otu.columns)
adiv_obs_otus = alpha_diversity('observed_otus', data, ids)
adiv_obs_otus
shannon(adiv_obs_otus, base=2)
#i cannot figure out why the shannon function is not working!